package cs311.hw7;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * The vertex class used in CSGraph.
 * @author Mason
 * 
 */
public class Vertex {
	private int vertexID;
	private Object vertexData;
	private String vertexLabel;
	private ArrayList<String> neighbors;
	// This does not determine neighbors, but just used to easily remove vertices.
	private ArrayList<Integer> associatedEdgeIDs;
	private Map<String, Integer> neighborEdges;
	
	// Variables for Dijkstras
	private boolean visited;
	private double distance;
	private Vertex pred;
	
	
	/**
	 * The constructor for the Vertex class. 
	 * @param vertexID A unique int used to identify alongside the label. This is generated by CSGraph.
	 * @param vertexLabel The vertex label supplied.
	 * @param vertexData The vertexData supplied.
	 */
	public Vertex(int vertexID, Object vertexData, String vertexLabel) {
		pred = null;
		visited = false;
		distance = 0;
		associatedEdgeIDs = new ArrayList<Integer>();
		neighbors = new ArrayList<String>();
		neighborEdges = new HashMap<String, Integer>();
		this.vertexID = vertexID;
		this.vertexData = vertexData;
		this.vertexLabel = vertexLabel;
	}
	
	/**
	 * Method used to get the ID of of the vertex. 
	 * @return The ID of the vertex.
	 */
	public int getVertexID() {
		return vertexID;
	}
	
	/**
	 * Method used to get the data of the vertex.
	 * @return The vertex data.
	 */
	public Object getVertexData() {
		return vertexData;
	}
	
	/**
	 * Method used to get the label of the vertex.
	 * @return The vertex label.
	 */
	public String getVertexLabel() {
		return vertexLabel;
	}
	
	/**
	 * Method used to check and see if the vertex has been visited  by any traversing algorithm.
	 * @return True if the vertex has been visited. False otherwise.
	 */
	public boolean isVisited() {
		return visited;
	}
	
	/**
	 * Sets the visited boolean used for traversal algorithms.
	 * @param status The boolean that visited will be set to.
	 */
	public void setVisited(boolean status) {
		visited = status;
	}
	
	/**
	 * Use to grab the edge IDs associated with this vertex.
	 * @return An ArrayList of the associated edge IDs.
	 */
	public ArrayList<Integer> getEdges(){
		return associatedEdgeIDs;
	}
	
	/**
	 * Adds the int to the list of associated edges for easy adding and removal.
	 * @param edgeID The ID of the edge.
	 */
	public void addEdge(Integer edgeID){
		// This might become redundant with addNeighbor also adding to the map
		associatedEdgeIDs.add(edgeID);
	}
	
	/**
	 * Removes the ID from the list of associated edges.
	 * @param edgeID The ID of the edge.
	 */
	public void removeEdge(Integer edgeID){
		associatedEdgeIDs.remove(edgeID);
	}
	
	/**
	 * Use to grab the neighbor labels associated with this vertex.
	 * @return An ArrayList of the associated neighbor labels.
	 */
	public ArrayList<String> getNeighbors(){
		return neighbors;
	}
	
	/**
	 * Adds the neighbor label to the list. It also adds it to the neighbor-edge map.
	 * @param vertexLabel The neighbor label.
	 * @param edgeID The ID of the edge that makes this a neighbor.
	 */
	public void addNeighbor(String vertexLabel, Integer edgeID){
		neighbors.add(vertexLabel);
		neighborEdges.put(vertexLabel, edgeID);
	}
	
	/**
	 * Removes the neighbor label from the list.
	 * @param vertexLabel The neighbor label.
	 */
	public void removeNeighbor(String vertexLabel){
		neighbors.remove(vertexLabel);
		try{
			neighborEdges.remove(vertexLabel);
		}
		catch (Exception e){
			return;
		}
	}
	
	/**
	 * Grabs the edge associated with the given neighbor.
	 * @param vertexLabel The label of the neighbor.
	 * @return Null if neighbor doesn't exist, otherwise the ID of the edge.
	 */
	public Integer getNeighborEdge(String vertexLabel){
		try{
			return neighborEdges.get(vertexLabel);
		}
		catch (Exception e){
			return null;
		}
	}
	
	/**
	 * Sets the distance of this vertex for some algorithm to use.
	 * @param distance The distance of the vertex
	 */
	public void setDistance(double distance){
		this.distance = distance;
	}
	
	public double getDistance(){
		return this.distance;
	}
	
	public void setPred(Vertex pred)
	{
		this.pred = pred;
	}
	
	public Vertex getPred(){
		return this.pred;
	}
}
